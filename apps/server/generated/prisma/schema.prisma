generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  name       String?
  role       Role      @default(USER)
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([customerId])
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  address   String?
  phone     String?
  users     User[] // Add this relation
  orders    Order[]
  ratings   Rating[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?     @db.Text
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  rating      Float?
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  ratings     Rating[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([name])
  @@index([price])
  @@index([rating])
}

model Order {
  id              String      @id @default(uuid())
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  items           OrderItem[]
  shippingAddress String?     @db.Text
  paymentMethod   String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([customerId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}

model Rating {
  id         String   @id @default(uuid())
  value      Int      @db.Int // Rating value (1-5)
  comment    String?  @db.Text
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, customerId]) // One rating per product per customer
  @@index([productId])
  @@index([customerId])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
